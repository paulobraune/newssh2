<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SSH Client - Connect</title>
  <link rel="stylesheet" href="/css/design-system.css">
  <style>
    body {
      font-family: var(--font-family-base);
      background-color: #f5f7fa;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    
    .page-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
    }
    
    .content-wrap {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem 1rem;
    }
    
    .connection-form {
      width: 100%;
      max-width: 1000px;
      animation: slideUp 0.5s ease;
    }
    
    @keyframes slideUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .form-instruction {
      margin-bottom: 1.5rem;
      color: var(--gray-600);
    }
    
    .two-column-layout {
      display: flex;
      gap: 1.5rem;
      margin-bottom: 1rem;
    }
    
    .column {
      flex: 1;
    }
    
    @media (max-width: 768px) {
      .two-column-layout {
        flex-direction: column;
        gap: 0;
      }
    }
    
    .field-group {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    @media (max-width: 768px) {
      .field-group {
        flex-direction: column;
        gap: 0;
      }
    }
    
    .help-text {
      font-size: var(--font-size-sm);
      color: var(--gray-600);
      margin-top: 0.25rem;
    }
    
    .footer {
      text-align: center;
      padding: 1rem;
      background-color: var(--gray-100);
      color: var(--gray-600);
      font-size: var(--font-size-sm);
    }
    
    .connection-mode-selector {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1rem;
      background-color: var(--gray-100);
      border-radius: var(--border-radius);
    }
    
    .connection-mode-option {
      flex: 1;
      position: relative;
    }
    
    .connection-mode-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .connection-mode-option label {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 1rem;
      background-color: var(--white);
      border: 2px solid var(--gray-300);
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    
    .connection-mode-option input[type="radio"]:checked + label {
      border-color: var(--primary);
      background-color: rgba(0, 92, 160, 0.05);
      box-shadow: 0 0 0 3px rgba(0, 92, 160, 0.2);
    }
    
    .connection-mode-option label .icon {
      font-size: 2rem;
      margin-bottom: 0.5rem;
      color: var(--gray-700);
    }
    
    .connection-mode-option input[type="radio"]:checked + label .icon {
      color: var(--primary);
    }
    
    .connection-mode-option label .label-text {
      font-weight: var(--font-weight-bold);
      color: var(--gray-700);
    }
    
    .connection-mode-option input[type="radio"]:checked + label .label-text {
      color: var(--primary);
    }
    
    .folder-path-options {
      margin-top: 1rem;
      padding: 1rem;
      background-color: var(--gray-100);
      border-radius: var(--border-radius);
    }
    
    .folder-option {
      margin-bottom: 1rem;
    }
    
    .folder-option:last-child {
      margin-bottom: 0;
    }
    
    .folder-path-input {
      display: none;
      margin-top: 0.5rem;
    }
    
    .folder-path-input.active {
      display: block;
    }

    /* Saved Connections Styles */
    .saved-connections {
      margin-bottom: 1.5rem;
      border: 1px solid var(--gray-300);
      border-radius: var(--border-radius);
      overflow: hidden;
    }

    .saved-connections-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 1rem;
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
    }

    .saved-connections-title {
      font-weight: var(--font-weight-bold);
      margin: 0;
      color: var(--gray-700);
    }

    .saved-connections-empty {
      padding: 1.5rem;
      text-align: center;
      color: var(--gray-600);
    }

    .saved-connections-list {
      max-height: 200px;
      overflow-y: auto;
    }

    .saved-connection-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid var(--gray-200);
      transition: var(--transition-base);
      cursor: pointer;
    }

    .saved-connection-item:last-child {
      border-bottom: none;
    }

    .saved-connection-item:hover {
      background-color: var(--gray-100);
    }

    .saved-connection-info {
      display: flex;
      flex-direction: column;
    }

    .saved-connection-name {
      font-weight: var(--font-weight-bold);
      color: var(--primary);
    }

    .saved-connection-details {
      font-size: var(--font-size-sm);
      color: var(--gray-600);
      margin-top: 0.25rem;
    }

    .saved-connection-actions {
      display: flex;
      gap: 0.5rem;
    }

    .saved-connection-action {
      background: none;
      border: none;
      padding: 0.25rem;
      border-radius: var(--border-radius-sm);
      color: var(--gray-600);
      cursor: pointer;
      transition: var(--transition-base);
    }

    .saved-connection-action:hover {
      background-color: var(--gray-200);
      color: var(--primary);
    }

    .save-connection-checkbox {
      margin-top: 1rem;
      display: flex;
      align-items: center;
    }

    .save-connection-checkbox input {
      margin-right: 0.5rem;
    }

    .connection-name-input {
      margin-top: 0.5rem;
      display: none;
    }

    .connection-name-input.active {
      display: block;
    }

    /* Modal Styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      background-color: white;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-lg);
      width: 90%;
      max-width: 400px;
      padding: 1.5rem;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--gray-300);
    }

    .modal-title {
      font-weight: var(--font-weight-bold);
      margin: 0;
      color: var(--gray-700);
    }

    .modal-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--gray-600);
    }

    .modal-buttons {
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
      margin-top: 1.5rem;
    }

    /* Tabs for SSH and API Keys */
    .tab-navigation {
      display: flex;
      border-bottom: 1px solid var(--gray-300);
      margin-bottom: 1.5rem;
    }

    .tab-button {
      padding: 0.75rem 1.25rem;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      cursor: pointer;
      font-weight: var(--font-weight-bold);
      color: var(--gray-600);
      transition: var(--transition-base);
    }

    .tab-button:hover {
      color: var(--primary);
    }

    .tab-button.active {
      color: var(--primary);
      border-bottom-color: var(--primary);
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    /* Badge for API status */
    .api-status-badge {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: var(--border-radius-sm);
      font-size: var(--font-size-xs);
      font-weight: var(--font-weight-bold);
      margin-left: 0.5rem;
    }

    .api-status-badge.connected {
      background-color: rgba(40, 167, 69, 0.2);
      color: var(--success);
    }

    .api-status-badge.disconnected {
      background-color: rgba(220, 53, 69, 0.2);
      color: var(--danger);
    }

    /* API Key Section */
    .api-keys-container {
      margin-bottom: 1.5rem;
    }

    .api-provider {
      background-color: white;
      border: 1px solid var(--gray-300);
      border-radius: var(--border-radius);
      padding: 1rem;
      margin-bottom: 1rem;
      transition: var(--transition-base);
    }

    .api-provider:hover {
      box-shadow: var(--shadow-sm);
    }

    .api-provider-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1rem;
    }

    .api-provider-logo {
      display: flex;
      align-items: center;
    }

    .api-provider-logo img {
      height: 24px;
      margin-right: 0.5rem;
    }

    .api-key-actions {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }
  </style>
</head>
<body>
  <div class="page-container">
    <!-- Navbar -->
    <nav class="navbar">
      <div class="container d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="/">
          <img src="https://assets.tracklead.com/assets/logo-tracklead-branca.png" alt="TrackLead Logo">
        </a>
        <div>
          <a href="/logout" class="btn btn-sm" style="color: white; border: 1px solid white;">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
              <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
              <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
            </svg>
            Logout
          </a>
        </div>
      </div>
    </nav>
    
    <div class="content-wrap">
      <div class="connection-form">
        <div class="card">
          <div class="card-header" style="background-color: var(--primary); color: white;">
            <h2 style="margin: 0; color: white;">Connection Manager</h2>
          </div>
          
          <div class="card-body p-4">
            <% if (error) { %>
              <div class="alert alert-danger mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                  <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                </svg>
                <%= error %>
              </div>
            <% } %>

            <!-- Tab Navigation -->
            <div class="tab-navigation">
              <button class="tab-button active" data-tab="ssh-connection">SSH Connection</button>
              <button class="tab-button" data-tab="api-keys">API Keys</button>
            </div>
            
            <!-- SSH Connection Tab Content -->
            <div class="tab-content active" id="ssh-connection">
              <!-- Saved Connections Section -->
              <div class="saved-connections">
                <div class="saved-connections-header">
                  <h3 class="saved-connections-title">Saved Connections</h3>
                  <button class="btn btn-sm btn-primary" id="manage-connections-btn" title="Manage Connections">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom;">
                      <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
                    </svg>
                  </button>
                </div>
                <div id="saved-connections-container">
                  <!-- Saved connections will be populated here -->
                  <div class="saved-connections-empty" id="no-saved-connections">
                    <p>No saved connections yet. Fill the form below and save your connection for easy access.</p>
                  </div>
                  <div id="saved-connections-list" class="saved-connections-list">
                    <!-- Connection items will be added here dynamically -->
                  </div>
                </div>
              </div>

              <p class="form-instruction">Enter the details of the SSH server you want to connect to:</p>
              
              <form action="/connect" method="post" id="connection-form">
                <div class="two-column-layout">
                  <div class="column">
                    <div class="field-group">
                      <div class="form-group" style="flex: 3;">
                        <label for="host" class="form-label">Host (IP or Hostname)</label>
                        <input 
                          type="text" 
                          id="host" 
                          name="host" 
                          class="form-control" 
                          required 
                          placeholder="e.g., example.com or 192.168.1.100"
                        >
                        <div class="help-text">The hostname or IP address of the remote server</div>
                      </div>
                      
                      <div class="form-group" style="flex: 1;">
                        <label for="port" class="form-label">Port</label>
                        <input 
                          type="number" 
                          id="port" 
                          name="port" 
                          class="form-control" 
                          placeholder="22" 
                          value="22"
                        >
                        <div class="help-text">Default: 22</div>
                      </div>
                    </div>
                    
                    <div class="form-group">
                      <label for="username" class="form-label">Username</label>
                      <input 
                        type="text" 
                        id="username" 
                        name="username" 
                        class="form-control" 
                        required 
                        placeholder="Username for SSH authentication"
                      >
                      <div class="help-text">Your username on the remote server</div>
                    </div>
                    
                    <div class="form-group">
                      <label for="password" class="form-label">Password</label>
                      <div class="password-wrapper" style="position: relative;">
                        <input 
                          type="password" 
                          id="password" 
                          name="password" 
                          class="form-control" 
                          placeholder="Password for SSH authentication"
                        >
                        <span id="toggle-password" style="position: absolute; right: 10px; top: 8px; cursor: pointer;">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                            <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                          </svg>
                        </span>
                      </div>
                      <div class="help-text">Your password for authentication (leave empty for key-based auth)</div>
                    </div>
                  </div>
                  
                  <div class="column">
                    <div class="form-group">
                      <label class="form-label">Initial Folder</label>
                      <div class="folder-path-options">
                        <div class="folder-option">
                          <div class="form-check">
                            <input 
                              class="form-check-input" 
                              type="radio" 
                              name="initialPathOption" 
                              id="defaultPath" 
                              value="default" 
                              checked 
                              onchange="togglePathInput()"
                            >
                            <label class="form-check-label" for="defaultPath">
                              <strong>Default Path</strong> - Connect to the default directory (usually home directory)
                            </label>
                          </div>
                        </div>
                        
                        <div class="folder-option">
                          <div class="form-check">
                            <input 
                              class="form-check-input" 
                              type="radio" 
                              name="initialPathOption" 
                              id="customPath" 
                              value="custom" 
                              onchange="togglePathInput()"
                            >
                            <label class="form-check-label" for="customPath">
                              <strong>Custom Path</strong> - Specify a directory to connect to
                            </label>
                          </div>
                          
                          <div id="customPathInput" class="folder-path-input">
                            <input 
                              type="text" 
                              class="form-control" 
                              id="initialPath" 
                              name="initialPath" 
                              placeholder="/path/to/directory"
                            >
                            <div class="help-text">Enter the absolute path on the remote server (e.g., /home/user/projects)</div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div class="form-group mt-4">
                      <label class="form-label">Connection Mode</label>
                      <div class="connection-mode-selector">
                        <div class="connection-mode-option">
                          <input type="radio" id="mode-terminal" name="mode" value="terminal" checked>
                          <label for="mode-terminal">
                            <span class="icon">
                              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M6 9a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3A.5.5 0 0 1 6 9zM3.854 4.146a.5.5 0 1 0-.708.708L4.793 6.5 3.146 8.146a.5.5 0 1 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2z"/>
                                <path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h12z"/>
                              </svg>
                            </span>
                            <span class="label-text">Terminal</span>
                          </label>
                        </div>
                        
                        <div class="connection-mode-option">
                          <input type="radio" id="mode-filemanager" name="mode" value="filemanager">
                          <label for="mode-filemanager">
                            <span class="icon">
                              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
                              </svg>
                            </span>
                            <span class="label-text">File Manager</span>
                          </label>
                        </div>
                        
                        <div class="connection-mode-option">
                          <input type="radio" id="mode-chat" name="mode" value="chat">
                          <label for="mode-chat">
                            <span class="icon">
                              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
                                <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
                              </svg>
                            </span>
                            <span class="label-text">AI Chat</span>
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Save Connection Option -->
                <div class="save-connection-checkbox">
                  <input type="checkbox" id="save-connection" name="save-connection">
                  <label for="save-connection">Save this connection for later use</label>
                </div>

                <div id="connection-name-input" class="connection-name-input">
                  <input 
                    type="text" 
                    class="form-control" 
                    id="connection-name" 
                    name="connection-name" 
                    placeholder="Enter a name for this connection"
                  >
                  <div class="help-text">Choose a descriptive name for this connection (e.g., Production Server)</div>
                </div>
                
                <div class="form-group mt-4">
                  <button type="submit" class="btn btn-primary btn-block" id="connect-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                      <path d="M13.5 3a.5.5 0 0 1 .5.5V11H2V3.5a.5.5 0 0 1 .5-.5h11zm-11-1A1.5 1.5 0 0 0 1 3.5V12h14V3.5A1.5 1.5 0 0 0 13.5 2h-11zM0 12.5h16a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5z"/>
                    </svg>
                    Connect to Server
                  </button>
                </div>
              </form>
            </div>
            
            <!-- API Keys Tab Content -->
            <div class="tab-content" id="api-keys">
              <p class="form-instruction">Manage your API keys for AI services. These keys will be available for all SSH connections.</p>
              
              <div class="api-keys-container">
                <!-- OpenAI -->
                <div class="api-provider">
                  <div class="api-provider-header">
                    <div class="api-provider-logo">
                      <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1024px-ChatGPT_logo.svg.png" alt="OpenAI Logo">
                      <h4 style="margin: 0;">OpenAI</h4>
                    </div>
                    <div id="openai-status-badge" class="api-status-badge disconnected">Not Configured</div>
                  </div>
                  
                  <div class="form-group">
                    <label for="openai-api-key" class="form-label">API Key</label>
                    <div style="position: relative;">
                      <input 
                        type="password" 
                        id="openai-api-key" 
                        class="form-control api-key-input" 
                        placeholder="sk-..." 
                        data-provider="openai"
                      >
                      <span class="toggle-api-key" style="position: absolute; right: 10px; top: 8px; cursor: pointer;" data-target="openai-api-key">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                          <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                        </svg>
                      </span>
                    </div>
                    <div class="help-text">Your OpenAI API key (starts with "sk-")</div>
                  </div>
                  
                  <div class="api-key-actions">
                    <button class="btn btn-secondary test-api-key" data-provider="openai">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                      </svg>
                      Test Connection
                    </button>
                    <button class="btn btn-primary save-api-key" data-provider="openai">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"/>
                      </svg>
                      Save
                    </button>
                  </div>
                </div>
                
                <!-- DeepSeek -->
                <div class="api-provider">
                  <div class="api-provider-header">
                    <div class="api-provider-logo">
                      <img src="https://avatars.githubusercontent.com/u/153553559?s=200&v=4" alt="DeepSeek Logo">
                      <h4 style="margin: 0;">DeepSeek</h4>
                    </div>
                    <div id="deepseek-status-badge" class="api-status-badge disconnected">Not Configured</div>
                  </div>
                  
                  <div class="form-group">
                    <label for="deepseek-api-key" class="form-label">API Key</label>
                    <div style="position: relative;">
                      <input 
                        type="password" 
                        id="deepseek-api-key" 
                        class="form-control api-key-input" 
                        placeholder="Enter DeepSeek API key" 
                        data-provider="deepseek"
                      >
                      <span class="toggle-api-key" style="position: absolute; right: 10px; top: 8px; cursor: pointer;" data-target="deepseek-api-key">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                          <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                        </svg>
                      </span>
                    </div>
                    <div class="help-text">Your DeepSeek API key</div>
                  </div>
                  
                  <div class="api-key-actions">
                    <button class="btn btn-secondary test-api-key" data-provider="deepseek">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                      </svg>
                      Test Connection
                    </button>
                    <button class="btn btn-primary save-api-key" data-provider="deepseek">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"/>
                      </svg>
                      Save
                    </button>
                  </div>
                </div>
                
                <!-- Anthropic -->
                <div class="api-provider">
                  <div class="api-provider-header">
                    <div class="api-provider-logo">
                      <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTSLqGxGIzvSJk9SrMrAWxkUXBmY0rWQAS1ew&s" alt="Anthropic Logo">
                      <h4 style="margin: 0;">Anthropic</h4>
                    </div>
                    <div id="anthropic-status-badge" class="api-status-badge disconnected">Not Configured</div>
                  </div>
                  
                  <div class="form-group">
                    <label for="anthropic-api-key" class="form-label">API Key</label>
                    <div style="position: relative;">
                      <input 
                        type="password" 
                        id="anthropic-api-key" 
                        class="form-control api-key-input" 
                        placeholder="Enter Anthropic API key" 
                        data-provider="anthropic"
                      >
                      <span class="toggle-api-key" style="position: absolute; right: 10px; top: 8px; cursor: pointer;" data-target="anthropic-api-key">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                          <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                          <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                        </svg>
                      </span>
                    </div>
                    <div class="help-text">Your Anthropic API key</div>
                  </div>
                  
                  <div class="api-key-actions">
                    <button class="btn btn-secondary test-api-key" data-provider="anthropic">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                      </svg>
                      Test Connection
                    </button>
                    <button class="btn btn-primary save-api-key" data-provider="anthropic">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"/>
                      </svg>
                      Save
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="alert alert-info">
                <p><strong>Note:</strong> API keys are stored securely and will be available in all SSH connections. They can be used for AI-powered features in the terminal.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">Delete Connection</h3>
          <button class="modal-close" id="close-delete-modal">&times;</button>
        </div>
        <p>Are you sure you want to delete this saved connection? This action cannot be undone.</p>
        <div class="modal-buttons">
          <button class="btn btn-secondary" id="cancel-delete">Cancel</button>
          <button class="btn btn-danger" id="confirm-delete">Delete</button>
        </div>
      </div>
    </div>

    <!-- API Test Result Modal -->
    <div id="api-test-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 class="modal-title">API Test Result</h3>
          <button class="modal-close" id="close-api-test-modal">&times;</button>
        </div>
        <div id="api-test-result"></div>
        <div class="modal-buttons">
          <button class="btn btn-primary" id="api-test-close">Close</button>
        </div>
      </div>
    </div>

    <footer class="footer">
      <div class="container">
        <p class="mb-0">© 2025 TrackLead SSH Client. All rights reserved.</p>
      </div>
    </footer>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Tab navigation
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tabId = button.getAttribute('data-tab');
          
          // Set active class on tab button
          tabButtons.forEach(btn => btn.classList.remove('active'));
          button.classList.add('active');
          
          // Show corresponding tab content
          tabContents.forEach(content => {
            content.classList.remove('active');
            if (content.id === tabId) {
              content.classList.add('active');
            }
          });
        });
      });

      // Saved Connections
      let savedConnections = [];
      let connectionToDelete = null;

      // Load saved connections
      function loadSavedConnections() {
        fetch('/api/connections')
          .then(response => response.json())
          .then(data => {
            savedConnections = data;
            renderSavedConnections();
          })
          .catch(error => {
            console.error('Error loading saved connections:', error);
          });
      }

      // Render saved connections
      function renderSavedConnections() {
        const noSavedConnections = document.getElementById('no-saved-connections');
        const savedConnectionsList = document.getElementById('saved-connections-list');
        
        savedConnectionsList.innerHTML = '';
        
        if (savedConnections.length === 0) {
          noSavedConnections.style.display = 'block';
          savedConnectionsList.style.display = 'none';
          return;
        }
        
        noSavedConnections.style.display = 'none';
        savedConnectionsList.style.display = 'block';
        
        savedConnections.forEach(connection => {
          const connectionItem = document.createElement('div');
          connectionItem.className = 'saved-connection-item';
          connectionItem.dataset.name = connection.name;
          
          connectionItem.innerHTML = `
            <div class="saved-connection-info">
              <div class="saved-connection-name">${connection.name}</div>
              <div class="saved-connection-details">${connection.username}@${connection.host}:${connection.port}</div>
            </div>
            <div class="saved-connection-actions">
              <button class="saved-connection-action use-connection" title="Use this connection">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0v-2z"/>
                  <path fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z"/>
                </svg>
              </button>
              <button class="saved-connection-action delete-connection" title="Delete this connection">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                  <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                </svg>
              </button>
            </div>
          `;
          
          savedConnectionsList.appendChild(connectionItem);
        });
        
        // Add event listeners to the connection items
        document.querySelectorAll('.use-connection').forEach(button => {
          button.addEventListener('click', function(e) {
            e.stopPropagation();
            const connectionName = this.closest('.saved-connection-item').dataset.name;
            const connection = savedConnections.find(conn => conn.name === connectionName);
            if (connection) {
              fillFormWithSavedConnection(connection);
            }
          });
        });
        
        document.querySelectorAll('.saved-connection-item').forEach(item => {
          item.addEventListener('click', function() {
            const connectionName = this.dataset.name;
            const connection = savedConnections.find(conn => conn.name === connectionName);
            if (connection) {
              fillFormWithSavedConnection(connection);
            }
          });
        });
        
        document.querySelectorAll('.delete-connection').forEach(button => {
          button.addEventListener('click', function(e) {
            e.stopPropagation();
            const connectionName = this.closest('.saved-connection-item').dataset.name;
            showDeleteModal(connectionName);
          });
        });
      }

      // Fill form with saved connection data
      function fillFormWithSavedConnection(connection) {
        document.getElementById('host').value = connection.host || '';
        document.getElementById('port').value = connection.port || '22';
        document.getElementById('username').value = connection.username || '';
        document.getElementById('password').value = connection.password || '';
        
        if (connection.initialPath && connection.initialPath !== '/home') {
          document.getElementById('customPath').checked = true;
          document.getElementById('initialPath').value = connection.initialPath;
          togglePathInput();
        } else {
          document.getElementById('defaultPath').checked = true;
          togglePathInput();
        }
        
        if (connection.mode === 'filemanager') {
          document.getElementById('mode-filemanager').checked = true;
        } else if (connection.mode === 'chat') {
          document.getElementById('mode-chat').checked = true;
        } else {
          document.getElementById('mode-terminal').checked = true;
        }
      }

      // Save Connection
      document.getElementById('save-connection').addEventListener('change', function() {
        const connectionNameInput = document.getElementById('connection-name-input');
        if (this.checked) {
          connectionNameInput.classList.add('active');
          document.getElementById('connection-name').setAttribute('required', 'required');
        } else {
          connectionNameInput.classList.remove('active');
          document.getElementById('connection-name').removeAttribute('required');
        }
      });

      // Handle form submission
      document.getElementById('connection-form').addEventListener('submit', function(e) {
        const saveConnection = document.getElementById('save-connection').checked;
        
        if (saveConnection) {
          e.preventDefault();
          
          const connectionName = document.getElementById('connection-name').value.trim();
          if (!connectionName) {
            alert('Please enter a name for this connection.');
            return;
          }
          
          const connectionData = {
            name: connectionName,
            host: document.getElementById('host').value,
            port: document.getElementById('port').value,
            username: document.getElementById('username').value,
            password: document.getElementById('password').value,
            initialPath: document.getElementById('customPath').checked ? 
              document.getElementById('initialPath').value : '/home',
            mode: document.querySelector('input[name="mode"]:checked').value
          };
          
          // Save connection
          fetch('/api/connections', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(connectionData),
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              this.submit();
            } else {
              alert('Error saving connection: ' + data.error);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while saving the connection.');
          });
        }
      });

      // Delete Connection Modal
      function showDeleteModal(connectionName) {
        connectionToDelete = connectionName;
        document.getElementById('delete-modal').style.display = 'flex';
      }

      document.getElementById('close-delete-modal').addEventListener('click', function() {
        document.getElementById('delete-modal').style.display = 'none';
      });

      document.getElementById('cancel-delete').addEventListener('click', function() {
        document.getElementById('delete-modal').style.display = 'none';
      });

      document.getElementById('confirm-delete').addEventListener('click', function() {
        if (connectionToDelete) {
          deleteConnection(connectionToDelete);
        }
      });

      function deleteConnection(connectionName) {
        fetch(`/api/connections/${encodeURIComponent(connectionName)}`, {
          method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            document.getElementById('delete-modal').style.display = 'none';
            loadSavedConnections();
          } else {
            alert('Error deleting connection: ' + data.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while deleting the connection.');
        });
      }

      // Toggle password visibility
      const togglePassword = document.getElementById('toggle-password');
      const passwordField = document.getElementById('password');
      
      togglePassword.addEventListener('click', function() {
        const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordField.setAttribute('type', type);
        
        // Change icon based on password visibility
        if (type === 'text') {
          togglePassword.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588zM5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z"/>
              <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12-.708.708z"/>
            </svg>
          `;
        } else {
          togglePassword.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
              <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
            </svg>
          `;
        }
      });
      
      // Add form validation with visual feedback
      const form = document.querySelector('form');
      const hostInput = document.getElementById('host');
      const usernameInput = document.getElementById('username');
      
      form.addEventListener('submit', function(e) {
        let valid = true;
        
        if (!hostInput.value.trim()) {
          highlightInvalid(hostInput);
          valid = false;
        } else {
          resetHighlight(hostInput);
        }
        
        if (!usernameInput.value.trim()) {
          highlightInvalid(usernameInput);
          valid = false;
        } else {
          resetHighlight(usernameInput);
        }
        
        // Validate custom path if selected
        const customPathSelected = document.getElementById('customPath').checked;
        const initialPathInput = document.getElementById('initialPath');
        
        if (customPathSelected && !initialPathInput.value.trim()) {
          highlightInvalid(initialPathInput);
          valid = false;
        } else if (customPathSelected) {
          resetHighlight(initialPathInput);
        }

        // Validate connection name if save is checked
        const saveConnection = document.getElementById('save-connection').checked;
        if (saveConnection) {
          const connectionNameInput = document.getElementById('connection-name');
          if (!connectionNameInput.value.trim()) {
            highlightInvalid(connectionNameInput);
            valid = false;
          } else {
            resetHighlight(connectionNameInput);
          }
        }
        
        if (!valid && !e.submitter.dataset.bypass) {
          e.preventDefault();
        }
      });
      
      function highlightInvalid(element) {
        element.style.borderColor = 'var(--danger)';
        element.style.backgroundColor = '#fff8f8';
      }
      
      function resetHighlight(element) {
        element.style.borderColor = '';
        element.style.backgroundColor = '';
      }
      
      // Initialize path input toggle
      togglePathInput();

      // Load saved connections on page load
      loadSavedConnections();

      // API Keys functionality
      // Toggle API key visibility
      document.querySelectorAll('.toggle-api-key').forEach(toggle => {
        toggle.addEventListener('click', function() {
          const targetId = this.getAttribute('data-target');
          const inputField = document.getElementById(targetId);
          
          const type = inputField.getAttribute('type') === 'password' ? 'text' : 'password';
          inputField.setAttribute('type', type);
          
          // Change icon based on visibility
          if (type === 'text') {
            this.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="m10.79 12.912-1.614-1.615a3.5 3.5 0 0 1-4.474-4.474l-2.06-2.06C.938 6.278 0 8 0 8s3 5.5 8 5.5a7.029 7.029 0 0 0 2.79-.588zM5.21 3.088A7.028 7.028 0 0 1 8 2.5c5 0 8 5.5 8 5.5s-.939 1.721-2.641 3.238l-2.062-2.062a3.5 3.5 0 0 0-4.474-4.474L5.21 3.089z"/>
                <path d="M5.525 7.646a2.5 2.5 0 0 0 2.829 2.829l-2.83-2.829zm4.95.708-2.829-2.83a2.5 2.5 0 0 1 2.829 2.829zm3.171 6-12-12 .708-.708 12 12-.708.708z"/>
              </svg>
            `;
          } else {
            this.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
              </svg>
            `;
          }
        });
      });

      // Save API key
      document.querySelectorAll('.save-api-key').forEach(button => {
        button.addEventListener('click', function() {
          const provider = this.getAttribute('data-provider');
          const apiKeyInput = document.getElementById(`${provider}-api-key`);
          const apiKey = apiKeyInput.value.trim();
          
          if (!apiKey) {
            alert('Please enter an API key.');
            return;
          }
          
          saveApiKey(provider, apiKey);
        });
      });

      function saveApiKey(provider, apiKey) {
        fetch('/api/apikeys', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ provider, apiKey }),
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            updateApiStatus(provider, true);
            alert(`${provider.charAt(0).toUpperCase() + provider.slice(1)} API key saved successfully.`);
          } else {
            alert('Error saving API key: ' + data.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while saving the API key.');
        });
      }

      // Test API key
      document.querySelectorAll('.test-api-key').forEach(button => {
        button.addEventListener('click', function() {
          const provider = this.getAttribute('data-provider');
          const apiKeyInput = document.getElementById(`${provider}-api-key`);
          const apiKey = apiKeyInput.value.trim();
          
          if (!apiKey) {
            alert('Please enter an API key to test.');
            return;
          }
          
          testApiKey(provider, apiKey);
        });
      });

      function testApiKey(provider, apiKey) {
        // Show loading state
        const button = document.querySelector(`.test-api-key[data-provider="${provider}"]`);
        const originalButtonText = button.innerHTML;
        button.innerHTML = `
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Testing...
        `;
        button.disabled = true;
        
        fetch('/api/apikeys/test', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ provider, apiKey }),
        })
        .then(response => response.json())
        .then(data => {
          // Reset button state
          button.innerHTML = originalButtonText;
          button.disabled = false;
          
          showApiTestResult(provider, data);
        })
        .catch(error => {
          // Reset button state
          button.innerHTML = originalButtonText;
          button.disabled = false;
          
          console.error('Error:', error);
          showApiTestResult(provider, { success: false, error: 'Network error. Please try again.' });
        });
      }

      function showApiTestResult(provider, data) {
        const modal = document.getElementById('api-test-modal');
        const resultContainer = document.getElementById('api-test-result');
        
        const providerName = provider.charAt(0).toUpperCase() + provider.slice(1);
        
        if (data.success) {
          resultContainer.innerHTML = `
            <div class="alert alert-success">
              <p><strong>Success!</strong> The ${providerName} API key is valid and working correctly.</p>
              <p>Response: ${data.message || 'Connection successful'}</p>
            </div>
          `;
        } else {
          resultContainer.innerHTML = `
            <div class="alert alert-danger">
              <p><strong>Error!</strong> The ${providerName} API key test failed.</p>
              <p>Error: ${data.error || 'Unknown error'}</p>
            </div>
          `;
        }
        
        modal.style.display = 'flex';
      }

      // Close API test modal
      document.getElementById('close-api-test-modal').addEventListener('click', function() {
        document.getElementById('api-test-modal').style.display = 'none';
      });

      document.getElementById('api-test-close').addEventListener('click', function() {
        document.getElementById('api-test-modal').style.display = 'none';
      });

      // Update API status badge
      function updateApiStatus(provider, isConnected) {
        const badge = document.getElementById(`${provider}-status-badge`);
        
        if (isConnected) {
          badge.className = 'api-status-badge connected';
          badge.textContent = 'Connected';
        } else {
          badge.className = 'api-status-badge disconnected';
          badge.textContent = 'Not Configured';
        }
      }

      // Load API keys on page load
      function loadApiKeys() {
        fetch('/api/apikeys')
          .then(response => response.json())
          .then(data => {
            if (data && Array.isArray(data)) {
              data.forEach(item => {
                if (item.provider && item.apiKey) {
                  document.getElementById(`${item.provider}-api-key`).value = item.apiKey;
                  updateApiStatus(item.provider, true);
                }
              });
            }
          })
          .catch(error => {
            console.error('Error loading API keys:', error);
          });
      }

      // Load API keys on page load
      loadApiKeys();
    });
    
    function togglePathInput() {
      const customPathSelected = document.getElementById('customPath').checked;
      const pathInputContainer = document.getElementById('customPathInput');
      
      if (customPathSelected) {
        pathInputContainer.classList.add('active');
        document.getElementById('initialPath').focus();
      } else {
        pathInputContainer.classList.remove('active');
      }
    }
  </script>
</body>
</html>